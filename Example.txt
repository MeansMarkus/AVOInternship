<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Property Map for Sprinkler/Drainage Company</title>
    
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.css" />
    
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            background: #f0f0f0;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .controls {
            background: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .controls h3 {
            margin: 0 0 15px 0;
            color: #2c5530;
        }
        
        .control-group {
            display: flex;
            gap: 10px;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .control-group label {
            min-width: 120px;
            font-weight: bold;
        }
        
        input[type="text"] {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        button {
            background: #2c5530;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
        }
        
        button:hover {
            background: #1e3d22;
        }
        
        #map {
            height: 600px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
        }
        
        .layer-controls {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        
        .layer-btn {
            background: #f8f9fa;
            color: #333;
            border: 1px solid #ddd;
            padding: 6px 12px;
            font-size: 12px;
        }
        
        .layer-btn.active {
            background: #2c5530;
            color: white;
        }
        
        .info-panel {
            background: white;
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸŒ¿ Property Visualization Tool</h1>
        
        <div class="controls">
            <h3>Property Search</h3>
            <div class="control-group">
                <label>Address:</label>
                <input type="text" id="addressInput" placeholder="Enter property address..." />
                <button onclick="searchAddress()">Search</button>
            </div>
            <div class="control-group">
                <label>Or click map to:</label>
                <button onclick="toggleMode('sprinkler')">Add Sprinkler Zone</button>
                <button onclick="toggleMode('drain')">Add Drainage Point</button>
                <button onclick="clearMarkers()">Clear All</button>
            </div>
            <div class="layer-controls">
                <button class="layer-btn active" onclick="switchLayer('street')">Street View</button>
                <button class="layer-btn" onclick="switchLayer('satellite')">Satellite View</button>
                <button class="layer-btn" onclick="switchLayer('terrain')">Terrain View</button>
            </div>
        </div>
        
        <div id="map"></div>
        
        <div class="info-panel">
            <h3>How to Use:</h3>
            <p><strong>Search:</strong> Enter an address to locate a property</p>
            <p><strong>Add Features:</strong> Click the sprinkler or drainage buttons, then click on the map to add zones/points</p>
            <p><strong>Switch Views:</strong> Use the layer buttons to switch between street, satellite, and terrain views</p>
            <p><strong>Zoom:</strong> Use mouse wheel or +/- buttons to zoom in/out</p>
        </div>
    </div>

    <!-- Leaflet JavaScript -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.js"></script>
    
    <script>
        // Initialize the map
        let map = L.map('map').setView([35.4676, -97.5164], 10); // Oklahoma City
        
        // Define different tile layers
        const layers = {
            street: L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: 'Â© OpenStreetMap contributors'
            }),
            satellite: L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
                attribution: 'Â© Esri & contributors'
            }),
            terrain: L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
                attribution: 'Â© OpenTopoMap contributors'
            })
        };
        
        // Add default layer
        layers.street.addTo(map);
        let currentLayer = 'street';
        
        // Mode tracking
        let currentMode = null;
        let markers = [];
        
        // Custom icons
        const sprinklerIcon = L.divIcon({
            html: 'ðŸ’§',
            iconSize: [20, 20],
            className: 'custom-div-icon'
        });
        
        const drainIcon = L.divIcon({
            html: 'ðŸš°',
            iconSize: [20, 20],
            className: 'custom-div-icon'
        });
        
        // Switch map layers
        function switchLayer(layerName) {
            map.removeLayer(layers[currentLayer]);
            map.addLayer(layers[layerName]);
            currentLayer = layerName;
            
            // Update button states
            document.querySelectorAll('.layer-btn').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
        }
        
        // Toggle modes
        function toggleMode(mode) {
            currentMode = currentMode === mode ? null : mode;
            
            // Update cursor
            if (currentMode) {
                map.getContainer().style.cursor = 'crosshair';
            } else {
                map.getContainer().style.cursor = '';
            }
        }
        
        // Handle map clicks
        map.on('click', function(e) {
            if (!currentMode) return;
            
            const lat = e.latlng.lat;
            const lng = e.latlng.lng;
            
            let marker;
            if (currentMode === 'sprinkler') {
                marker = L.marker([lat, lng], {icon: sprinklerIcon})
                    .addTo(map)
                    .bindPopup(`Sprinkler Zone<br>Lat: ${lat.toFixed(6)}<br>Lng: ${lng.toFixed(6)}`);
            } else if (currentMode === 'drain') {
                marker = L.marker([lat, lng], {icon: drainIcon})
                    .addTo(map)
                    .bindPopup(`Drainage Point<br>Lat: ${lat.toFixed(6)}<br>Lng: ${lng.toFixed(6)}`);
            }
            
            markers.push(marker);
        });
        
        // Clear all markers
        function clearMarkers() {
            markers.forEach(marker => map.removeLayer(marker));
            markers = [];
        }
        
        // Search address (using Nominatim - free geocoding)
        async function searchAddress() {
            const address = document.getElementById('addressInput').value;
            if (!address) return;
            
            try {
                const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`);
                const results = await response.json();
                
                if (results.length > 0) {
                    const result = results[0];
                    const lat = parseFloat(result.lat);
                    const lng = parseFloat(result.lon);
                    
                    // Center map on result
                    map.setView([lat, lng], 16);
                    
                    // Add a marker for the property
                    const propertyMarker = L.marker([lat, lng])
                        .addTo(map)
                        .bindPopup(`<strong>Property</strong><br>${result.display_name}`)
                        .openPopup();
                    
                    markers.push(propertyMarker);
                } else {
                    alert('Address not found. Please try a different search.');
                }
            } catch (error) {
                console.error('Geocoding error:', error);
                alert('Error searching for address. Please try again.');
            }
        }
        
        // Allow Enter key in address input
        document.getElementById('addressInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchAddress();
            }
        });
    </script>
</body>
</html>